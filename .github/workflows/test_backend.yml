name: Tests

on:
  pull_request:  # Ejecutar en todas las Pull Requests
    types:
      - opened
      - synchronize
      - reopened
  push:  # Ejecutar solo en ramas especÃ­ficas
    branches:
      - main
      - dev

  
env:
  APP_NAME: BookHub
  DB_HOST: localhost
  DB_PORT: 3306
  DB_USER: root
  DB_PASSWORD: psswd
  DB_NAME: bookhubdb

jobs:

  test:
    permissions:
      # Gives the action the necessary permissions for publishing new
      # comments in pull requests.
      pull-requests: write
      # Gives the action the necessary permissions for pushing data to the
      # python-coverage-comment-action branch, and for editing existing
      # comments (to avoid publishing multiple comments in the same PR)
      contents: write
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql
        env:
          MYSQL_DATABASE: bookhubdb
          MYSQL_USER: testuser
          MYSQL_PASSWORD: psswd
          MYSQL_ROOT_PASSWORD: psswd
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11.2'
    - uses: Gr1N/setup-poetry@v8
    - run: poetry --version
    - name: Install dependencies
      run: |
        cd backend          
        poetry lock
        poetry install --all-extras
    - name: Lint
      id: lint
      run: |
        cd backend
        poetry run pylint --exit-zero --output-format=text --max-line-length=120 app | tee /tmp/pylint.txt
        sed -n 's/^Your code has been rated at \([-0-9.]*\)\/.*/\1/p' /tmp/pylint.txt > /tmp/pylint.score
        echo "score=$(cat /tmp/pylint.score)" >> $GITHUB_OUTPUT
    - name: Create lint badge
      uses: emibcn/badge-action@v2.0.3
      continue-on-error: true
      with:
        label: 'pylint'
        status: ${{ steps.lint.outputs.score }}
        color: 'blue,555,daf'
        path: '.github/badges/pylint.svg'
    - name: Run tests
      env:
        PROJECT_NAME: env.APP_NAME
      run: |
        cd backend
        poetry run alembic upgrade head
        poetry run pytest --cov=app --cov-report=xml:coverage.xml

    - name: Store coverage files
      uses: actions/upload-artifact@v4
      with:
        name: coverage-html
        path: backend/htmlcov

    - name: Get Cover 
      uses: orgoro/coverage@v3.2
      continue-on-error: true
      with:
          coverageFile: backend/coverage.xml
          token: ${{ secrets.GITHUB_TOKEN }}